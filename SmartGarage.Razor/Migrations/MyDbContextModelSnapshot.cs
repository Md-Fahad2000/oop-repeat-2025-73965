// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using workshopManagementSystem.Razor;

#nullable disable

namespace SmartGarage.Razor.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("workshopManagementSystem.Domain.Admin", b =>
                {
                    b.Property<int>("AdministratorAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdministratorAccessPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AdministratorEmailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AdministratorFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AdministratorAccountId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("workshopManagementSystem.Domain.Car", b =>
                {
                    b.Property<int>("VehicleRegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerAccountId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleLicenseNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("VehicleRegistrationId");

                    b.HasIndex("CustomerAccountId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("workshopManagementSystem.Domain.Customer", b =>
                {
                    b.Property<int>("CustomerAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CustomerAccessPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerEmailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CustomerFullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CustomerAccountId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("workshopManagementSystem.Domain.Mechanic", b =>
                {
                    b.Property<int>("TechnicianAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("TechnicianAccessPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TechnicianEmailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TechnicianFullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TechnicianAccountId");

                    b.ToTable("Mechanics");
                });

            modelBuilder.Entity("workshopManagementSystem.Domain.Service", b =>
                {
                    b.Property<int>("ServiceRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("ServiceCompletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ServiceCurrentStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ServiceStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("ServiceTotalCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ServiceWorkDescription")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("ServiceWorkHours")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("TechnicianAccountId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleRegistrationId")
                        .HasColumnType("int");

                    b.HasKey("ServiceRecordId");

                    b.HasIndex("TechnicianAccountId");

                    b.HasIndex("VehicleRegistrationId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("workshopManagementSystem.Domain.Car", b =>
                {
                    b.HasOne("workshopManagementSystem.Domain.Customer", "VehicleOwner")
                        .WithMany("CustomerVehicles")
                        .HasForeignKey("CustomerAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleOwner");
                });

            modelBuilder.Entity("workshopManagementSystem.Domain.Service", b =>
                {
                    b.HasOne("workshopManagementSystem.Domain.Mechanic", "ServiceTechnician")
                        .WithMany("TechnicianServiceHistory")
                        .HasForeignKey("TechnicianAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("workshopManagementSystem.Domain.Car", "ServiceVehicle")
                        .WithMany("VehicleServiceHistory")
                        .HasForeignKey("VehicleRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceTechnician");

                    b.Navigation("ServiceVehicle");
                });

            modelBuilder.Entity("workshopManagementSystem.Domain.Car", b =>
                {
                    b.Navigation("VehicleServiceHistory");
                });

            modelBuilder.Entity("workshopManagementSystem.Domain.Customer", b =>
                {
                    b.Navigation("CustomerVehicles");
                });

            modelBuilder.Entity("workshopManagementSystem.Domain.Mechanic", b =>
                {
                    b.Navigation("TechnicianServiceHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
